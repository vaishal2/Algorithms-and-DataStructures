/*Vaishal 

International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: "a" maps to ".-", "b" maps to "-...", "c" maps to "-.-.", and so on.

For convenience, the full table for the 26 letters of the English alphabet is given below:

[".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."]
Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, "cba" can be written as "-.-..--...", (which is the concatenation "-.-." + "-..." + ".-"). We'll call such a concatenation, the transformation of a word.

Return the number of different transformations among all words we have.

Example:
Input: words = ["gin", "zen", "gig", "msg"]
Output: 2
Explanation: 
The transformation of each word is:
"gin" -> "--...-."
"zen" -> "--...-."
"gig" -> "--...--."
"msg" -> "--...--."

There are 2 different transformations, "--...-." and "--...--.".
Note:

The length of words will be at most 100.
Each words[i] will have length in range [1, 12].
words[i] will only consist of lowercase letters.

*/

class Solution {
    public int uniqueMorseRepresentations(String[] words) {
        //create a new hashset
        Set<String> set1 = new HashSet<String>();
        // store the morse code in a array of strings
        String[] Morse = new String[]{".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."};
        
        //iterate through the word array
        for (String s: words){
            //Stringbuilder- concatenating in a loop
            StringBuilder wordstring= new StringBuilder();
            // convert the string s into characterarray
            for (char c:s.toCharArray())
                //ascii transformation and append it to stringbuilder(wordstring). For each character it gets the morsecode reprentation and add its to string.
                wordstring.append(Morse[c-'a']);
            // add the stringbuilder(wordstring) to the hashset.
                    set1.add(wordstring.toString());
                 
        }
        
        
            //return size of the hashset.
            return set1.size();
    }
}
