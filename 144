/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
//recursive solution

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        
        List<Integer> list=new ArrayList<Integer>();
        if(root==null)
        {
            return list;
        }
        list.add(root.val);
        list.addAll(preorderTraversal(root.left));
        list.addAll(preorderTraversal(root.right));
        
        return list;
        
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }




/*
Iterative solution
*/

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        
        List<Integer> list= new ArrayList<Integer>();
        if(root==null)
        {
            return list;
        }
        
        Stack<TreeNode>s= new Stack<>();
        
        s.add(root);
        
        while(!s.isEmpty()){
            root=s.pop();
            list.add(root.val);
    
        if(root.right!=null)
        {
            s.push(root.right);
        }
        if(root.left!=null)
        {
            s.push(root.left);
        }
        
}
        return list;
    }   
}
