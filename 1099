Given an array A of integers and integer K, return the maximum S such that there exists i < j with A[i] + A[j] = S and S < K. If no i, j exist satisfying this equation, return -1.

 

Example 1:

Input: A = [34,23,1,24,75,33,54,8], K = 60
Output: 58
Explanation: 
We can use 34 and 24 to sum 58 which is less than 60.
Example 2:

Input: A = [10,20,30], K = 15
Output: -1
Explanation: 
In this case it's not possible to get a pair sum less that 15.
 

Note:

1 <= A.length <= 100
1 <= A[i] <= 1000
1 <= K <= 2000





/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication46;

import java.util.Arrays;

/**
 *
 * @author vaish
 */
public class JavaApplication46 {
    

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        
        int[] A = new int[]{34,23,1,24,75,33,54,8};
        
         int p= twoSumLessThanK(A,60);  
         
         System.out.println(p);
                 }
    public static int twoSumLessThanK(int[] A, int K) {
        int max = -1;
        Arrays.sort(A);
        int i=0, j=A.length-1;
        while(i<j){
            int temp = A[i] + A[j];
            if(temp<K){
                max = Math.max(temp, max);
                i++;
            }else{
                j--;
            }
        }
        
        return max;
    }
}
        
    
    

