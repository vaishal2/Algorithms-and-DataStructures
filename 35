Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Example 1:

Input: [1,3,5,6], 5
Output: 2
Example 2:

Input: [1,3,5,6], 2
Output: 1
Example 3:

Input: [1,3,5,6], 7
Output: 4

//Linear solution 

class Solution {
    public int searchInsert(int[] nums, int target) {
    
        for(int i=0;i<nums.length;i++){
            if(nums[i]== target){
                return i;
            }
            
           
             else if(target<nums[i]){
             return i;
             }
        }
                return nums.length;
        
        //Binary search 
        /*    int start=0;
        int last= nums.length-1;
        
        while(start<=last){
            int middle=(start+last)/2;
            
            if(target==nums[middle]){
                return middle;
            }
             else if(target>nums[middle]){
            start=middle+1;
             }
            else
                last=middle-1;
            
        }
        return start;*/
    }
}

Example 4:

Input: [1,3,5,6], 0
Output: 0

//Linear solution 

class Solution {
    public int searchInsert(int[] nums, int target) {
    
        for(int i=0;i<nums.length;i++){
            if(nums[i]== target){
                return i;
            }
            
           
             else if(target<nums[i]){
             return i;
             }
        }
                return nums.length;
        
        //Binary search 
        /*    int start=0;
        int last= nums.length-1;
        
        while(start<=last){
            int middle=(start+last)/2;
            
            if(target==nums[middle]){
                return middle;
            }
             else if(target>nums[middle]){
            start=middle+1;
             }
            else
                last=middle-1;
            
        }
        return start;*/
    }
}
