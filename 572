Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree of itself.

Example 1:
Given tree s:

     3
    / \
   4   5
  / \
 1   2
Given tree t:
   4 
  / \
 1   2
Return true, because t has the same structure and node values with a subtree of s.
Example 2:
Given tree s:

     3
    / \
   4   5
  / \
 1   2
    /
   0
Given tree t:
   4
  / \
 1   2
Return false.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
      
        //check if parent tree is null,return false if it is.
        if(s==null)
            return false;
        
        //return true if the isSame function returns true.
        if(isSame(s,t))return true;
        
        //Check if the subtrees left or right of the parent tree s is equal to our given subtree t.
        return isSubtree(s.left,t) || isSubtree(s.right,t);
        
    }
        
        
        private boolean isSame(TreeNode s,TreeNode t){
          // check if both trees are null, return true if they are because a null tree is a valid subtree.  
        if(s==null && t==null){
            return true;
        }
            // if either one of them is null, return false. You can't have one tree with nodes and another one null.
        
        if(s==null || t==null){
            return false;
        }
            
            //check if the values in nodes are same, if not,return false.
        
        if(s.val!=t.val){
            return false;
        }
        
            //check if the left subtree of s and t are same.
        return (isSame(s.left,t.left) && isSame(s.right,t.right));
        }
        
    }
